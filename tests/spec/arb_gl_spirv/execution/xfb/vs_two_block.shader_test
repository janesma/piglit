# XFB test using two input blocks, both with the same structure, but
# captured to different buffers.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 4.50
GL_ARB_gl_spirv

[vertex shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 53
; Schema: 0
               OpCapability Shader
               OpCapability TransformFeedback
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %main "main" %color %x0 %x1 %gl_VertexID %gl_InstanceID
               OpExecutionMode %main Xfb
               OpSource GLSL 450
               OpDecorate %color Location 0
               OpDecorate %color XfbBuffer 0
               OpDecorate %color XfbStride 28
               OpMemberDecorate %block0 0 Offset 0
               OpMemberDecorate %block0 1 Offset 4
               OpMemberDecorate %block0 2 Offset 20
               OpDecorate %block0 Block
               OpDecorate %x0 Location 0
               OpDecorate %x0 XfbBuffer 0
               OpDecorate %x0 XfbStride 28
               OpMemberDecorate %block1 0 Offset 0
               OpMemberDecorate %block1 1 Offset 4
               OpMemberDecorate %block1 2 Offset 20
               OpDecorate %block1 Block
               OpDecorate %x1 Location 4
               OpDecorate %x1 XfbBuffer 1
               OpDecorate %x1 XfbStride 28
               OpDecorate %gl_VertexID BuiltIn VertexId
               OpDecorate %gl_InstanceID BuiltIn InstanceId
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Output_v4float = OpTypePointer Output %v4float
      %color = OpVariable %_ptr_Output_v4float Output
    %float_0 = OpConstant %float 0
         %11 = OpConstantComposite %v4float %float_0 %float_0 %float_0 %float_0
       %uint = OpTypeInt 32 0
     %uint_2 = OpConstant %uint 2
%_arr_float_uint_2 = OpTypeArray %float %uint_2
     %block0 = OpTypeStruct %float %v4float %_arr_float_uint_2
%_ptr_Output_block0 = OpTypePointer Output %block0
         %x0 = OpVariable %_ptr_Output_block0 Output
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
    %float_1 = OpConstant %float 1
%_ptr_Output_float = OpTypePointer Output %float
      %int_1 = OpConstant %int 1
    %float_2 = OpConstant %float 2
    %float_3 = OpConstant %float 3
    %float_4 = OpConstant %float 4
    %float_5 = OpConstant %float 5
         %28 = OpConstantComposite %v4float %float_2 %float_3 %float_4 %float_5
      %int_2 = OpConstant %int 2
    %float_6 = OpConstant %float 6
    %float_7 = OpConstant %float 7
     %block1 = OpTypeStruct %float %v4float %_arr_float_uint_2
%_ptr_Output_block1 = OpTypePointer Output %block1
         %x1 = OpVariable %_ptr_Output_block1 Output
    %float_8 = OpConstant %float 8
    %float_9 = OpConstant %float 9
   %float_10 = OpConstant %float 10
   %float_11 = OpConstant %float 11
   %float_12 = OpConstant %float 12
         %44 = OpConstantComposite %v4float %float_9 %float_10 %float_11 %float_12
   %float_13 = OpConstant %float 13
   %float_14 = OpConstant %float 14
%_ptr_Input_int = OpTypePointer Input %int
%gl_VertexID = OpVariable %_ptr_Input_int Input
%gl_InstanceID = OpVariable %_ptr_Input_int Input
       %main = OpFunction %void None %3
          %5 = OpLabel
               OpStore %color %11
         %22 = OpAccessChain %_ptr_Output_float %x0 %int_0
               OpStore %22 %float_1
         %29 = OpAccessChain %_ptr_Output_v4float %x0 %int_1
               OpStore %29 %28
         %32 = OpAccessChain %_ptr_Output_float %x0 %int_2 %int_0
               OpStore %32 %float_6
         %34 = OpAccessChain %_ptr_Output_float %x0 %int_2 %int_1
               OpStore %34 %float_7
         %39 = OpAccessChain %_ptr_Output_float %x1 %int_0
               OpStore %39 %float_8
         %45 = OpAccessChain %_ptr_Output_v4float %x1 %int_1
               OpStore %45 %44
         %47 = OpAccessChain %_ptr_Output_float %x1 %int_2 %int_0
               OpStore %47 %float_13
         %49 = OpAccessChain %_ptr_Output_float %x1 %int_2 %int_1
               OpStore %49 %float_14
               OpReturn
               OpFunctionEnd

[vertex shader]
#version 450

layout(xfb_buffer=0, xfb_offset=0) out block0 {
    float f;
    vec4 v;
    float f2[2];
} x0;

layout(xfb_buffer=1, xfb_offset=0) out block1 {
    float f;
    vec4 v;
    float f2[2];
} x1;

layout(location=0) out vec4 color;

void main() {
  color = vec4(0.0);

  x0.f = 1.0;
  x0.v = vec4(2.0, 3.0, 4.0, 5.0);
  x0.f2[0] = 6.0;
  x0.f2[1] = 7.0;

  x1.f = 8.0;
  x1.v = vec4(9.0, 10.0, 11.0, 12);
  x1.f2[0] = 13.0;
  x1.f2[1] = 14.0;
}

[test]
# With arrays of blocks, each component uses a different buffer, see
# GLSL spec section 4.4.2

xfb buffer object 0 256
xfb buffer object 1 256

xfb draw arrays GL_POINTS 0 1

verify query_object GL_PRIMITIVES_GENERATED 1
verify query_object GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 1

expected buffer 256

expected buffer float 0 1.0
expected buffer float 1 2.0
expected buffer float 2 3.0
expected buffer float 3 4.0
expected buffer float 4 5.0
expected buffer float 5 6.0
expected buffer float 6 7.0
probe xfb buffer float 0 7

expected buffer 256 # Not really needed to call again, just to force a clean-up
expected buffer float 0 8.0
expected buffer float 1 9.0
expected buffer float 2 10.0
expected buffer float 3 11.0
expected buffer float 4 12.0
expected buffer float 5 13.0
expected buffer float 6 14.0
probe xfb buffer float 1 7

verify program_query GL_TRANSFORM_FEEDBACK_VARYINGS 6
