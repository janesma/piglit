# XFB test using a input block. On the original GLSL, setting the
# xfb_offset on the block. That means that the frontend (glslang) will
# assign an xfb_offset for all the members of the block, and all of
# them will be captured.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 4.50
GL_ARB_gl_spirv

[vertex shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 38
; Schema: 0
               OpCapability Shader
               OpCapability TransformFeedback
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %main "main" %color %x %gl_VertexID %gl_InstanceID
               OpExecutionMode %main Xfb
               OpSource GLSL 450
               OpDecorate %color Location 0
               OpDecorate %color XfbBuffer 0
               OpDecorate %color XfbStride 28
               OpMemberDecorate %block 0 Offset 0
               OpMemberDecorate %block 1 Offset 4
               OpMemberDecorate %block 2 Offset 20
               OpDecorate %block Block
               OpDecorate %x Location 0
               OpDecorate %x XfbBuffer 0
               OpDecorate %x XfbStride 28
               OpDecorate %gl_VertexID BuiltIn VertexId
               OpDecorate %gl_InstanceID BuiltIn InstanceId
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Output_v4float = OpTypePointer Output %v4float
      %color = OpVariable %_ptr_Output_v4float Output
    %float_0 = OpConstant %float 0
         %11 = OpConstantComposite %v4float %float_0 %float_0 %float_0 %float_0
       %uint = OpTypeInt 32 0
     %uint_2 = OpConstant %uint 2
%_arr_float_uint_2 = OpTypeArray %float %uint_2
      %block = OpTypeStruct %float %v4float %_arr_float_uint_2
%_ptr_Output_block = OpTypePointer Output %block
          %x = OpVariable %_ptr_Output_block Output
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
    %float_1 = OpConstant %float 1
%_ptr_Output_float = OpTypePointer Output %float
      %int_1 = OpConstant %int 1
    %float_2 = OpConstant %float 2
    %float_3 = OpConstant %float 3
    %float_4 = OpConstant %float 4
    %float_5 = OpConstant %float 5
         %28 = OpConstantComposite %v4float %float_2 %float_3 %float_4 %float_5
      %int_2 = OpConstant %int 2
    %float_6 = OpConstant %float 6
    %float_7 = OpConstant %float 7
%_ptr_Input_int = OpTypePointer Input %int
%gl_VertexID = OpVariable %_ptr_Input_int Input
%gl_InstanceID = OpVariable %_ptr_Input_int Input
       %main = OpFunction %void None %3
          %5 = OpLabel
               OpStore %color %11
         %22 = OpAccessChain %_ptr_Output_float %x %int_0
               OpStore %22 %float_1
         %29 = OpAccessChain %_ptr_Output_v4float %x %int_1
               OpStore %29 %28
         %32 = OpAccessChain %_ptr_Output_float %x %int_2 %int_0
               OpStore %32 %float_6
         %34 = OpAccessChain %_ptr_Output_float %x %int_2 %int_1
               OpStore %34 %float_7
               OpReturn
               OpFunctionEnd

[vertex shader]
#version 450

layout(xfb_buffer=0, xfb_offset=0) out block {
    float f;
    vec4 v;
    float f2[2];
} x;

layout(location=0) out vec4 color;

void main() {
  color = vec4(0.0);

  x.f = 1.0;
  x.v = vec4(2.0, 3.0, 4.0, 5.0);
  x.f2[0] = 6.0;
  x.f2[1] = 7.0;
}

[test]
xfb buffer object 0 256

xfb draw arrays GL_POINTS 0 1

verify query_object GL_PRIMITIVES_GENERATED 1
verify query_object GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 1

expected buffer 256

expected buffer float 0 1.0
expected buffer float 1 2.0
expected buffer float 2 3.0
expected buffer float 3 4.0
expected buffer float 4 5.0
expected buffer float 5 6.0
expected buffer float 6 7.0
probe xfb buffer float 0 7

verify program_query GL_TRANSFORM_FEEDBACK_VARYINGS 3
