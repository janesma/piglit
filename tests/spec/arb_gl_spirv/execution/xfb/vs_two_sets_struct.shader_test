# XFB test using two different buffers, mixed basic types with
# structures.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 4.50
GL_ARB_gl_spirv

[vertex shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 57
; Schema: 0
               OpCapability Shader
               OpCapability TransformFeedback
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Vertex %main "main" %_ %s1 %s2 %gl_VertexID %gl_InstanceID
               OpExecutionMode %main Xfb
               OpSource GLSL 450
               OpSourceExtension "GL_ARB_enhanced_layouts"
               OpName %_ ""
               OpMemberDecorate %gl_PerVertex 0 BuiltIn Position
               OpMemberDecorate %gl_PerVertex 1 BuiltIn PointSize
               OpMemberDecorate %gl_PerVertex 2 BuiltIn ClipDistance
               OpMemberDecorate %gl_PerVertex 3 BuiltIn CullDistance
               OpDecorate %gl_PerVertex Block
               OpDecorate %_ XfbBuffer 0
               OpDecorate %_ XfbStride 24
               OpDecorate %s1 Location 0
               OpDecorate %s1 XfbBuffer 0
               OpDecorate %s1 XfbStride 24
               OpDecorate %s1 Offset 0
               OpMemberDecorate %S2 0 Offset 0
               OpMemberDecorate %S2 1 Offset 4
               OpDecorate %s2 Location 6
               OpDecorate %s2 XfbBuffer 2
               OpDecorate %s2 XfbStride 20
               OpDecorate %s2 Offset 0
               OpDecorate %gl_VertexID BuiltIn VertexId
               OpDecorate %gl_InstanceID BuiltIn InstanceId
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
       %uint = OpTypeInt 32 0
     %uint_1 = OpConstant %uint 1
%_arr_float_uint_1 = OpTypeArray %float %uint_1
%gl_PerVertex = OpTypeStruct %v4float %float %_arr_float_uint_1 %_arr_float_uint_1
%_ptr_Output_gl_PerVertex = OpTypePointer Output %gl_PerVertex
          %_ = OpVariable %_ptr_Output_gl_PerVertex Output
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
    %float_0 = OpConstant %float 0
         %17 = OpConstantComposite %v4float %float_0 %float_0 %float_0 %float_0
%_ptr_Output_v4float = OpTypePointer Output %v4float
      %Array = OpTypeStruct %float
     %uint_2 = OpConstant %uint 2
%_arr_Array_uint_2 = OpTypeArray %Array %uint_2
        %AoA = OpTypeStruct %_arr_Array_uint_2
%_arr_AoA_uint_2 = OpTypeArray %AoA %uint_2
          %S = OpTypeStruct %float %_arr_AoA_uint_2 %float
%_ptr_Output_S = OpTypePointer Output %S
         %s1 = OpVariable %_ptr_Output_S Output
    %float_1 = OpConstant %float 1
%_ptr_Output_float = OpTypePointer Output %float
      %int_1 = OpConstant %int 1
    %float_2 = OpConstant %float 2
    %float_3 = OpConstant %float 3
    %float_4 = OpConstant %float 4
    %float_5 = OpConstant %float 5
      %int_2 = OpConstant %int 2
    %float_6 = OpConstant %float 6
         %S2 = OpTypeStruct %float %v4float
%_ptr_Output_S2 = OpTypePointer Output %S2
         %s2 = OpVariable %_ptr_Output_S2 Output
    %float_7 = OpConstant %float 7
    %float_8 = OpConstant %float 8
    %float_9 = OpConstant %float 9
   %float_10 = OpConstant %float 10
   %float_11 = OpConstant %float 11
         %52 = OpConstantComposite %v4float %float_8 %float_9 %float_10 %float_11
%_ptr_Input_int = OpTypePointer Input %int
%gl_VertexID = OpVariable %_ptr_Input_int Input
%gl_InstanceID = OpVariable %_ptr_Input_int Input
       %main = OpFunction %void None %3
          %5 = OpLabel
         %19 = OpAccessChain %_ptr_Output_v4float %_ %int_0
               OpStore %19 %17
         %30 = OpAccessChain %_ptr_Output_float %s1 %int_0
               OpStore %30 %float_1
         %33 = OpAccessChain %_ptr_Output_float %s1 %int_1 %int_0 %int_0 %int_0 %int_0
               OpStore %33 %float_2
         %35 = OpAccessChain %_ptr_Output_float %s1 %int_1 %int_0 %int_0 %int_1 %int_0
               OpStore %35 %float_3
         %37 = OpAccessChain %_ptr_Output_float %s1 %int_1 %int_1 %int_0 %int_0 %int_0
               OpStore %37 %float_4
         %39 = OpAccessChain %_ptr_Output_float %s1 %int_1 %int_1 %int_0 %int_1 %int_0
               OpStore %39 %float_5
         %42 = OpAccessChain %_ptr_Output_float %s1 %int_2
               OpStore %42 %float_6
         %47 = OpAccessChain %_ptr_Output_float %s2 %int_0
               OpStore %47 %float_7
         %53 = OpAccessChain %_ptr_Output_v4float %s2 %int_1
               OpStore %53 %52
               OpReturn
               OpFunctionEnd

[vertex shader]
#version 150
#extension GL_ARB_enhanced_layouts: require

struct Array {
  float x2_out;
};
struct AoA {
  Array x2_Array[2];
};
struct S {
  float x1_out;
  AoA x2_AoA[2];
  float x3_out;
};
layout(xfb_offset = 0) out S s1;
layout(xfb_offset = 0, xfb_buffer = 2) out struct S2 {
  float y1_out;
  vec4 y2_out;
} s2;
void main() {
  gl_Position = vec4(0.0);
  s1.x1_out = 1.0;
  s1.x2_AoA[0].x2_Array[0].x2_out = 2.0;
  s1.x2_AoA[0].x2_Array[1].x2_out = 3.0;
  s1.x2_AoA[1].x2_Array[0].x2_out = 4.0;
  s1.x2_AoA[1].x2_Array[1].x2_out = 5.0;
  s1.x3_out = 6.0;
  s2.y1_out = 7.0;
  s2.y2_out = vec4(8.0, 9.0, 10.0, 11.0);
}

[test]
xfb buffer object 0 64
xfb buffer object 2 64

xfb draw arrays GL_POINTS 0 1

verify query_object GL_PRIMITIVES_GENERATED 1
verify query_object GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 1

expected buffer 64

expected buffer float 0 1.0
expected buffer float 1 2.0
expected buffer float 2 3.0
expected buffer float 3 4.0
expected buffer float 4 5.0
expected buffer float 5 6.0

probe xfb buffer float 0 5

expected buffer 64 # Not really needed, just to clean.
expected buffer float 0 7.0
expected buffer float 1 8.0
expected buffer float 2 9.0
expected buffer float 3 10.0
expected buffer float 4 11.0

probe xfb buffer float 2 5

verify program_query GL_TRANSFORM_FEEDBACK_VARYINGS 8