# Tests the atomic counter operations described in the
# ARB_shader_atomic_counters spec for an array of arrays of
# atomic counters in a fragment shader.
#
# Checks the final value of the atomic counters and the values
# returned by the operations.
#
# The declaration of the atomic counter AOA uses the atomic counter
# layout qualifiers binding and offset.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 4.50

[vertex shader passthrough]

[fragment shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 76
; Schema: 0
               OpCapability Shader
               OpCapability AtomicStorage
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %color
               OpExecutionMode %main OriginLowerLeft
               OpSource GLSL 450
               OpName %main "main"
               OpName %a0_out "a0_out"
               OpName %a "a"
               OpName %a0_expected "a0_expected"
               OpName %color "color"
               OpName %a1_out "a1_out"
               OpName %a1_expected "a1_expected"
               OpName %a2_out "a2_out"
               OpName %a2_expected "a2_expected"
               OpDecorate %a Offset 4
               OpDecorate %a DescriptorSet 0
               OpDecorate %a Binding 0
               OpDecorate %a0_expected Location 0
               OpDecorate %a0_expected DescriptorSet 0
               OpDecorate %a0_expected Binding 1
               OpDecorate %color Location 0
               OpDecorate %a1_expected Location 1
               OpDecorate %a1_expected DescriptorSet 0
               OpDecorate %a1_expected Binding 2
               OpDecorate %a2_expected Location 2
               OpDecorate %a2_expected DescriptorSet 0
               OpDecorate %a2_expected Binding 3
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
     %uint_3 = OpConstant %uint 3
%_arr_uint_uint_3 = OpTypeArray %uint %uint_3
     %uint_2 = OpConstant %uint 2
%_arr__arr_uint_uint_3_uint_2 = OpTypeArray %_arr_uint_uint_3 %uint_2
%_ptr_AtomicCounter__arr__arr_uint_uint_3_uint_2 = OpTypePointer AtomicCounter %_arr__arr_uint_uint_3_uint_2
          %a = OpVariable %_ptr_AtomicCounter__arr__arr_uint_uint_3_uint_2 AtomicCounter
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
%_ptr_AtomicCounter_uint = OpTypePointer AtomicCounter %uint
     %uint_1 = OpConstant %uint 1
     %uint_0 = OpConstant %uint 0
%_ptr_UniformConstant_uint = OpTypePointer UniformConstant %uint
%a0_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
       %bool = OpTypeBool
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Output_v4float = OpTypePointer Output %v4float
      %color = OpVariable %_ptr_Output_v4float Output
    %float_1 = OpConstant %float 1
    %float_0 = OpConstant %float 0
  %float_255 = OpConstant %float 255
      %int_1 = OpConstant %int 1
%a1_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
%float_0_100000001 = OpConstant %float 0.100000001
      %int_2 = OpConstant %int 2
%a2_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
%float_0_200000003 = OpConstant %float 0.200000003
         %75 = OpConstantComposite %v4float %float_0 %float_1 %float_0 %float_1
       %main = OpFunction %void None %3
          %5 = OpLabel
     %a0_out = OpVariable %_ptr_Function_uint Function
     %a1_out = OpVariable %_ptr_Function_uint Function
     %a2_out = OpVariable %_ptr_Function_uint Function
         %18 = OpAccessChain %_ptr_AtomicCounter_uint %a %int_0 %int_0
         %21 = OpAtomicLoad %uint %18 %uint_1 %uint_0
               OpStore %a0_out %21
         %22 = OpLoad %uint %a0_out
         %25 = OpLoad %uint %a0_expected
         %27 = OpINotEqual %bool %22 %25
               OpSelectionMerge %29 None
               OpBranchConditional %27 %28 %29
         %28 = OpLabel
         %36 = OpLoad %uint %a0_out
         %37 = OpConvertUToF %float %36
         %39 = OpFDiv %float %37 %float_255
         %40 = OpCompositeConstruct %v4float %float_1 %float_0 %39 %float_1
               OpStore %color %40
               OpReturn
         %29 = OpLabel
         %44 = OpAccessChain %_ptr_AtomicCounter_uint %a %int_1 %int_1
         %45 = OpAtomicIIncrement %uint %44 %uint_1 %uint_0
               OpStore %a1_out %45
         %46 = OpLoad %uint %a1_out
         %48 = OpLoad %uint %a1_expected
         %49 = OpINotEqual %bool %46 %48
               OpSelectionMerge %51 None
               OpBranchConditional %49 %50 %51
         %50 = OpLabel
         %53 = OpLoad %uint %a1_out
         %54 = OpConvertUToF %float %53
         %55 = OpFDiv %float %54 %float_255
         %56 = OpCompositeConstruct %v4float %float_1 %float_0_100000001 %55 %float_1
               OpStore %color %56
               OpReturn
         %51 = OpLabel
         %60 = OpAccessChain %_ptr_AtomicCounter_uint %a %int_1 %int_2
         %61 = OpAtomicIDecrement %uint %60 %uint_1 %uint_0
         %62 = OpISub %uint %61 %int_1
               OpStore %a2_out %62
         %63 = OpLoad %uint %a2_out
         %65 = OpLoad %uint %a2_expected
         %66 = OpINotEqual %bool %63 %65
               OpSelectionMerge %68 None
               OpBranchConditional %66 %67 %68
         %67 = OpLabel
         %70 = OpLoad %uint %a2_out
         %71 = OpConvertUToF %float %70
         %72 = OpFDiv %float %71 %float_255
         %73 = OpCompositeConstruct %v4float %float_1 %float_0_200000003 %72 %float_1
               OpStore %color %73
               OpReturn
         %68 = OpLabel
               OpStore %color %75
               OpReturn
               OpFunctionEnd

[fragment shader]
#version 450

layout (binding = 0, offset = 4) uniform atomic_uint a[2][3];

layout (location = 0) uniform uint a0_expected;
layout (location = 1) uniform uint a1_expected;
layout (location = 2) uniform uint a2_expected;

layout (location = 0) out vec4 color;

void main()
{
	uint a0_out = atomicCounter(a[0][0]);
	if (a0_out != a0_expected) {
		color = vec4(1.0, 0.0, float(a0_out) / 255.0, 1.0);
		return;
	}

	uint a1_out = atomicCounterIncrement(a[1][1]);
	if (a1_out != a1_expected) {
		color = vec4(1.0, 0.1, float(a1_out) / 255.0, 1.0);
		return;
	}

	uint a2_out = atomicCounterDecrement(a[1][2]);
	if (a2_out != a2_expected) {
		color = vec4(1.0, 0.2, float(a2_out) / 255.0, 1.0);
		return;
	}

	color = vec4(0.0, 1.0, 0.0, 1.0);
}

[test]

clear color 0.0 0.0 0.0 0.0
clear

# Initialize atomic counters

atomic counter buffer 0 7
atomic counter 0 0 0
atomic counter 0 1 3
atomic counter 0 2 6
atomic counter 0 3 9
atomic counter 0 4 12
atomic counter 0 5 15
atomic counter 0 6 18

# Expected return values for the atomic counter operations

uniform uint 0 3
uniform uint 1 15
uniform uint 2 17

verify program_query GL_ACTIVE_UNIFORMS 5

# Check original values for the atomic counters

probe atomic counter buffer 0 0 == 0   # outside array (offset qualifier was 4)
probe atomic counter buffer 0 4 == 3   # a[0][0]
probe atomic counter buffer 0 8 == 6   # a[0][1]
probe atomic counter buffer 0 12 == 9  # a[0][2]
probe atomic counter buffer 0 16 == 12 # a[1][0]
probe atomic counter buffer 0 20 == 15 # a[1][1]
probe atomic counter buffer 0 24 == 18 # a[1][2]

draw rect ortho 0 0 1 1

# Check final values for the atomic counters

probe atomic counter buffer 0 0 == 0    # outside array (offset qualifier was 4)
probe atomic counter buffer 0 4 == 3    # a[0][0]
probe atomic counter buffer 0 8 == 6    # a[0][1]
probe atomic counter buffer 0 12 == 9   # a[0][2]
probe atomic counter buffer 0 16 == 12  # a[1][0]
probe atomic counter buffer 0 20 == 16  # a[1][1]
probe atomic counter buffer 0 24 == 17  # a[1][2]

probe rgba 0 0 0.0 1.0 0.0 1.0
