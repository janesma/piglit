# Tests the atomic counter operations described in the
# ARB_shader_atomic_counters specification using arrays
# of atomic counters in a CS with  local_sizes_x, y, z
# equal to 3, 2 and 1 respectively.
#
# Checks the final value of the atomic counter and the values
# returned by the operations.
#
# The declaration of the atomic counters array uses the atomic
# counter layout qualifiers binding and offset.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 4.50

[compute shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 67
; Schema: 0
               OpCapability Shader
               OpCapability AtomicStorage
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %gl_LocalInvocationIndex
               OpExecutionMode %main LocalSize 3 2 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %a0_out "a0_out"
               OpName %a "a"
               OpName %a0_expected "a0_expected"
               OpName %gl_LocalInvocationIndex "gl_LocalInvocationIndex"
               OpName %ok_a0 "ok_a0"
               OpName %a1_out "a1_out"
               OpName %a1_expected "a1_expected"
               OpName %ok_a1 "ok_a1"
               OpName %a2_out "a2_out"
               OpName %a2_expected "a2_expected"
               OpName %ok_a2 "ok_a2"
               OpDecorate %a Offset 4
               OpDecorate %a DescriptorSet 0
               OpDecorate %a Binding 0
               OpDecorate %a0_expected Location 0
               OpDecorate %a0_expected DescriptorSet 0
               OpDecorate %a0_expected Binding 4
               OpDecorate %gl_LocalInvocationIndex BuiltIn LocalInvocationIndex
               OpDecorate %ok_a0 Offset 0
               OpDecorate %ok_a0 DescriptorSet 0
               OpDecorate %ok_a0 Binding 1
               OpDecorate %a1_expected Location 6
               OpDecorate %a1_expected DescriptorSet 0
               OpDecorate %a1_expected Binding 5
               OpDecorate %ok_a1 Offset 0
               OpDecorate %ok_a1 DescriptorSet 0
               OpDecorate %ok_a1 Binding 2
               OpDecorate %a2_expected Location 12
               OpDecorate %a2_expected DescriptorSet 0
               OpDecorate %a2_expected Binding 6
               OpDecorate %ok_a2 Offset 0
               OpDecorate %ok_a2 DescriptorSet 0
               OpDecorate %ok_a2 Binding 3
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
     %uint_3 = OpConstant %uint 3
%_arr_uint_uint_3 = OpTypeArray %uint %uint_3
%_ptr_AtomicCounter__arr_uint_uint_3 = OpTypePointer AtomicCounter %_arr_uint_uint_3
          %a = OpVariable %_ptr_AtomicCounter__arr_uint_uint_3 AtomicCounter
        %int = OpTypeInt 32 1
      %int_0 = OpConstant %int 0
%_ptr_AtomicCounter_uint = OpTypePointer AtomicCounter %uint
     %uint_1 = OpConstant %uint 1
     %uint_0 = OpConstant %uint 0
     %uint_6 = OpConstant %uint 6
%_arr_uint_uint_6 = OpTypeArray %uint %uint_6
%_ptr_UniformConstant__arr_uint_uint_6 = OpTypePointer UniformConstant %_arr_uint_uint_6
%a0_expected = OpVariable %_ptr_UniformConstant__arr_uint_uint_6 UniformConstant
%_ptr_Input_uint = OpTypePointer Input %uint
%gl_LocalInvocationIndex = OpVariable %_ptr_Input_uint Input
%_ptr_UniformConstant_uint = OpTypePointer UniformConstant %uint
       %bool = OpTypeBool
      %ok_a0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
      %int_1 = OpConstant %int 1
%a1_expected = OpVariable %_ptr_UniformConstant__arr_uint_uint_6 UniformConstant
      %ok_a1 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
      %int_2 = OpConstant %int 2
%a2_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
      %ok_a2 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
     %v3uint = OpTypeVector %uint 3
     %uint_2 = OpConstant %uint 2
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_3 %uint_2 %uint_1
       %main = OpFunction %void None %3
          %5 = OpLabel
     %a0_out = OpVariable %_ptr_Function_uint Function
     %a1_out = OpVariable %_ptr_Function_uint Function
     %a2_out = OpVariable %_ptr_Function_uint Function
         %16 = OpAccessChain %_ptr_AtomicCounter_uint %a %int_0
         %19 = OpAtomicIIncrement %uint %16 %uint_1 %uint_0
               OpStore %a0_out %19
         %20 = OpLoad %uint %a0_out
         %27 = OpLoad %uint %gl_LocalInvocationIndex
         %29 = OpAccessChain %_ptr_UniformConstant_uint %a0_expected %27
         %30 = OpLoad %uint %29
         %32 = OpIEqual %bool %20 %30
               OpSelectionMerge %34 None
               OpBranchConditional %32 %33 %34
         %33 = OpLabel
         %36 = OpAtomicIIncrement %uint %ok_a0 %uint_1 %uint_0
               OpBranch %34
         %34 = OpLabel
         %39 = OpAccessChain %_ptr_AtomicCounter_uint %a %int_1
         %40 = OpAtomicIDecrement %uint %39 %uint_1 %uint_0
         %41 = OpISub %uint %40 %int_1
               OpStore %a1_out %41
         %42 = OpLoad %uint %a1_out
         %44 = OpLoad %uint %gl_LocalInvocationIndex
         %45 = OpAccessChain %_ptr_UniformConstant_uint %a1_expected %44
         %46 = OpLoad %uint %45
         %47 = OpIEqual %bool %42 %46
               OpSelectionMerge %49 None
               OpBranchConditional %47 %48 %49
         %48 = OpLabel
         %51 = OpAtomicIIncrement %uint %ok_a1 %uint_1 %uint_0
               OpBranch %49
         %49 = OpLabel
         %54 = OpAccessChain %_ptr_AtomicCounter_uint %a %int_2
         %55 = OpAtomicLoad %uint %54 %uint_1 %uint_0
               OpStore %a2_out %55
         %56 = OpLoad %uint %a2_out
         %58 = OpLoad %uint %a2_expected
         %59 = OpIEqual %bool %56 %58
               OpSelectionMerge %61 None
               OpBranchConditional %59 %60 %61
         %60 = OpLabel
         %63 = OpAtomicIIncrement %uint %ok_a2 %uint_1 %uint_0
               OpBranch %61
         %61 = OpLabel
               OpReturn
               OpFunctionEnd

[compute shader]
#version 450

layout (local_size_x = 3, local_size_y = 2, local_size_z = 1) in;

layout (binding = 0, offset = 4) uniform atomic_uint a[3];

layout (binding = 1) uniform atomic_uint ok_a0;
layout (binding = 2) uniform atomic_uint ok_a1;
layout (binding = 3) uniform atomic_uint ok_a2;

layout (location = 0) uniform uint a0_expected[6];
layout (location = 6) uniform uint a1_expected[6];
layout (location = 12) uniform uint a2_expected;

void main()
{
    uint a0_out = atomicCounterIncrement(a[0]);
    if (a0_out == a0_expected[gl_LocalInvocationIndex])
       atomicCounterIncrement(ok_a0);

    uint a1_out = atomicCounterDecrement(a[1]);
    if (a1_out == a1_expected[gl_LocalInvocationIndex])
       atomicCounterIncrement(ok_a1);

    uint a2_out = atomicCounter(a[2]);
    if (a2_out == a2_expected)
       atomicCounterIncrement(ok_a2);
}

[test]

# Initialize atomic counters

atomic counter buffer 0 4

atomic counter buffer 1 1
atomic counter buffer 2 1
atomic counter buffer 3 1

atomic counter 0 0 0

atomic counter 0 1 10  # a[0]
atomic counter 0 2 20  # a[1]
atomic counter 0 3 30  # a[2]

atomic counter 1 0 0   # ok_a0
atomic counter 2 0 0   # ok_a1
atomic counter 3 0 0   # ok_a2

# Expected return values for the atomic counter operations
# depending on the invocation number.

uniform uint 0 10  # a0_expected[0]
uniform uint 1 11  # a0_expected[1]
uniform uint 2 12  # a0_expected[2]
uniform uint 3 13  # a0_expected[3]
uniform uint 4 14  # a0_expected[4]
uniform uint 5 15  # a0_expected[5]

uniform uint 6 19   # a1_expected[0]
uniform uint 7 18   # a1_expected[1]
uniform uint 8 17   # a1_expected[2]
uniform uint 9 16   # a1_expected[3]
uniform uint 10 15  # a1_expected[4]
uniform uint 11 14  # a1_expected[5]

uniform uint 12 30  # a2_expected

verify program_query GL_ACTIVE_UNIFORMS 7

# Check original values for the atomic counters

probe atomic counter buffer 0 0 == 0

probe atomic counter buffer 0 4 == 10  # a[0]
probe atomic counter buffer 0 8 == 20  # a[1]
probe atomic counter buffer 0 12 == 30 # a[2]

probe atomic counter buffer 1 0 == 0   # ok_a0
probe atomic counter buffer 2 0 == 0   # ok_b0
probe atomic counter buffer 3 0 == 0   # ok_c0

compute 1 1 1

# Check final values for the atomic counters

probe atomic counter buffer 0 0 == 0

probe atomic counter buffer 0 4 == 16  # a[0]
probe atomic counter buffer 0 8 == 14  # a[1]
probe atomic counter buffer 0 12 == 30 # a[2]

probe atomic counter buffer 1 0 == 6   # ok_a0
probe atomic counter buffer 2 0 == 6   # ok_a1
probe atomic counter buffer 3 0 == 6   # ok_a2
