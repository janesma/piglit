# Tests the atomic counter operations described in the
# ARB_shader_atomic_counters specification in a CS with
# local_sizes_x, y, z equal to 3, 2 and 1 respectively.
#
# Checks the final value of the atomic counter and the values
# returned by the operations.
#
# The declaration of the atomic counters uses the atomic counter
# layout qualifiers binding and offset.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 4.50

[compute shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 62
; Schema: 0
               OpCapability Shader
               OpCapability AtomicStorage
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %gl_LocalInvocationIndex
               OpExecutionMode %main LocalSize 3 2 1
               OpSource GLSL 450
               OpName %main "main"
               OpName %a0_out "a0_out"
               OpName %a0 "a0"
               OpName %a0_expected "a0_expected"
               OpName %gl_LocalInvocationIndex "gl_LocalInvocationIndex"
               OpName %ok_a0 "ok_a0"
               OpName %b0_out "b0_out"
               OpName %b0 "b0"
               OpName %b0_expected "b0_expected"
               OpName %ok_b0 "ok_b0"
               OpName %c0_out "c0_out"
               OpName %c0 "c0"
               OpName %c0_expected "c0_expected"
               OpName %ok_c0 "ok_c0"
               OpDecorate %a0 Offset 24
               OpDecorate %a0 DescriptorSet 0
               OpDecorate %a0 Binding 3
               OpDecorate %a0_expected Location 0
               OpDecorate %a0_expected DescriptorSet 0
               OpDecorate %a0_expected Binding 0
               OpDecorate %gl_LocalInvocationIndex BuiltIn LocalInvocationIndex
               OpDecorate %ok_a0 Offset 0
               OpDecorate %ok_a0 DescriptorSet 0
               OpDecorate %ok_a0 Binding 4
               OpDecorate %b0 Offset 0
               OpDecorate %b0 DescriptorSet 0
               OpDecorate %b0 Binding 2
               OpDecorate %b0_expected Location 6
               OpDecorate %b0_expected DescriptorSet 0
               OpDecorate %b0_expected Binding 7
               OpDecorate %ok_b0 Offset 0
               OpDecorate %ok_b0 DescriptorSet 0
               OpDecorate %ok_b0 Binding 5
               OpDecorate %c0 Offset 4
               OpDecorate %c0 DescriptorSet 0
               OpDecorate %c0 Binding 1
               OpDecorate %c0_expected Location 12
               OpDecorate %c0_expected DescriptorSet 0
               OpDecorate %c0_expected Binding 8
               OpDecorate %ok_c0 Offset 0
               OpDecorate %ok_c0 DescriptorSet 0
               OpDecorate %ok_c0 Binding 6
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
%_ptr_AtomicCounter_uint = OpTypePointer AtomicCounter %uint
         %a0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
     %uint_1 = OpConstant %uint 1
     %uint_0 = OpConstant %uint 0
     %uint_6 = OpConstant %uint 6
%_arr_uint_uint_6 = OpTypeArray %uint %uint_6
%_ptr_UniformConstant__arr_uint_uint_6 = OpTypePointer UniformConstant %_arr_uint_uint_6
%a0_expected = OpVariable %_ptr_UniformConstant__arr_uint_uint_6 UniformConstant
%_ptr_Input_uint = OpTypePointer Input %uint
%gl_LocalInvocationIndex = OpVariable %_ptr_Input_uint Input
%_ptr_UniformConstant_uint = OpTypePointer UniformConstant %uint
       %bool = OpTypeBool
      %ok_a0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
         %b0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
        %int = OpTypeInt 32 1
      %int_1 = OpConstant %int 1
%b0_expected = OpVariable %_ptr_UniformConstant__arr_uint_uint_6 UniformConstant
      %ok_b0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
         %c0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
%c0_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
      %ok_c0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
     %v3uint = OpTypeVector %uint 3
     %uint_3 = OpConstant %uint 3
     %uint_2 = OpConstant %uint 2
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_3 %uint_2 %uint_1
       %main = OpFunction %void None %3
          %5 = OpLabel
     %a0_out = OpVariable %_ptr_Function_uint Function
     %b0_out = OpVariable %_ptr_Function_uint Function
     %c0_out = OpVariable %_ptr_Function_uint Function
         %13 = OpAtomicIIncrement %uint %a0 %uint_1 %uint_0
               OpStore %a0_out %13
         %14 = OpLoad %uint %a0_out
         %21 = OpLoad %uint %gl_LocalInvocationIndex
         %23 = OpAccessChain %_ptr_UniformConstant_uint %a0_expected %21
         %24 = OpLoad %uint %23
         %26 = OpIEqual %bool %14 %24
               OpSelectionMerge %28 None
               OpBranchConditional %26 %27 %28
         %27 = OpLabel
         %30 = OpAtomicIIncrement %uint %ok_a0 %uint_1 %uint_0
               OpBranch %28
         %28 = OpLabel
         %33 = OpAtomicIDecrement %uint %b0 %uint_1 %uint_0
         %36 = OpISub %uint %33 %int_1
               OpStore %b0_out %36
         %37 = OpLoad %uint %b0_out
         %39 = OpLoad %uint %gl_LocalInvocationIndex
         %40 = OpAccessChain %_ptr_UniformConstant_uint %b0_expected %39
         %41 = OpLoad %uint %40
         %42 = OpIEqual %bool %37 %41
               OpSelectionMerge %44 None
               OpBranchConditional %42 %43 %44
         %43 = OpLabel
         %46 = OpAtomicIIncrement %uint %ok_b0 %uint_1 %uint_0
               OpBranch %44
         %44 = OpLabel
         %49 = OpAtomicLoad %uint %c0 %uint_1 %uint_0
               OpStore %c0_out %49
         %50 = OpLoad %uint %c0_out
         %52 = OpLoad %uint %c0_expected
         %53 = OpIEqual %bool %50 %52
               OpSelectionMerge %55 None
               OpBranchConditional %53 %54 %55
         %54 = OpLabel
         %57 = OpAtomicIIncrement %uint %ok_c0 %uint_1 %uint_0
               OpBranch %55
         %55 = OpLabel
               OpReturn
               OpFunctionEnd

[compute shader]
#version 450

layout (local_size_x = 3, local_size_y = 2, local_size_z = 1) in;

layout (binding = 3, offset = 24) uniform atomic_uint a0;
layout (binding = 2) uniform atomic_uint b0;
layout (binding = 1, offset = 4) uniform atomic_uint c0;

layout (binding = 4) uniform atomic_uint ok_a0;
layout (binding = 5) uniform atomic_uint ok_b0;
layout (binding = 6) uniform atomic_uint ok_c0;

layout (location = 0) uniform uint a0_expected[6];
layout (location = 6) uniform uint b0_expected[6];
layout (location = 12) uniform uint c0_expected;

void main()
{
    uint a0_out = atomicCounterIncrement(a0);
    if (a0_out == a0_expected[gl_LocalInvocationIndex])
       atomicCounterIncrement(ok_a0);

    uint b0_out = atomicCounterDecrement(b0);
    if (b0_out == b0_expected[gl_LocalInvocationIndex])
       atomicCounterIncrement(ok_b0);

    uint c0_out = atomicCounter(c0);
    if (c0_out == c0_expected)
       atomicCounterIncrement(ok_c0);
}

[test]

# Initialize atomic counters

atomic counter buffer 3 7
atomic counter buffer 2 1
atomic counter buffer 1 2

atomic counter buffer 4 1
atomic counter buffer 5 1
atomic counter buffer 6 1

atomic counter 3 5 0
atomic counter 3 6 5   # a0
atomic counter 2 0 10  # b0
atomic counter 1 1 7   # c0

atomic counter 4 0 0   # ok_a0
atomic counter 5 0 0   # ok_b0
atomic counter 6 0 0   # ok_c0

# Expected return values for the atomic counter operations
# depending on the invocation number.

uniform uint 0 5   # a0_expected[0]
uniform uint 1 6   # a0_expected[1]
uniform uint 2 7   # a0_expected[2]
uniform uint 3 8   # a0_expected[3]
uniform uint 4 9   # a0_expected[4]
uniform uint 5 10  # a0_expected[5]

uniform uint 6 9   # b0_expected[0]
uniform uint 7 8   # b0_expected[1]
uniform uint 8 7   # b0_expected[2]
uniform uint 9 6   # b0_expected[3]
uniform uint 10 5  # b0_expected[4]
uniform uint 11 4  # b0_expected[5]

uniform uint 12 7  # c0_expected

verify program_query GL_ACTIVE_UNIFORMS 9

# Check original values for the atomic counters

probe atomic counter buffer 3 20 == 0

probe atomic counter buffer 3 24 == 5  # a0
probe atomic counter buffer 2 0 == 10  # b0
probe atomic counter buffer 1 4 == 7   # c0

probe atomic counter buffer 4 0 == 0   # ok_a0
probe atomic counter buffer 5 0 == 0   # ok_b0
probe atomic counter buffer 6 0 == 0   # ok_c0

compute 1 1 1

# Check final values for the atomic counters

probe atomic counter buffer 3 20 == 0

probe atomic counter buffer 3 24 == 11 # a0
probe atomic counter buffer 2 0 == 4   # b0
probe atomic counter buffer 1 4 == 7   # c0

probe atomic counter buffer 4 0 == 6   # ok_a0
probe atomic counter buffer 5 0 == 6   # ok_b0
probe atomic counter buffer 6 0 == 6   # ok_c0
