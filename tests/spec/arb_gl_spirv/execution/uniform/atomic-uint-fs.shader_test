# Tests the atomic counter operations described in the
# ARB_shader_atomic_counters specification in a FS.
#
# Checks the final value of the atomic counter and the values
# returned by the operations.
#
# The declaration of the atomic counters uses the atomic counter
# layout qualifiers binding and offset.

[require]
SPIRV YES
GL >= 3.3
GLSL >= 4.50

[vertex shader passthrough]

[fragment shader spirv]
; Automatically generated from the GLSL by shader_test_spirv.py. DO NOT EDIT
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 6
; Bound: 68
; Schema: 0
               OpCapability Shader
               OpCapability AtomicStorage
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %color
               OpExecutionMode %main OriginLowerLeft
               OpSource GLSL 450
               OpName %main "main"
               OpName %a0_out "a0_out"
               OpName %a0 "a0"
               OpName %a0_expected "a0_expected"
               OpName %color "color"
               OpName %a1_out "a1_out"
               OpName %a1 "a1"
               OpName %a1_expected "a1_expected"
               OpName %b0_out "b0_out"
               OpName %b0 "b0"
               OpName %b0_expected "b0_expected"
               OpDecorate %a0 Offset 4
               OpDecorate %a0 DescriptorSet 0
               OpDecorate %a0 Binding 0
               OpDecorate %a0_expected Location 0
               OpDecorate %a0_expected DescriptorSet 0
               OpDecorate %a0_expected Binding 1
               OpDecorate %color Location 0
               OpDecorate %a1 Offset 12
               OpDecorate %a1 DescriptorSet 0
               OpDecorate %a1 Binding 0
               OpDecorate %a1_expected Location 1
               OpDecorate %a1_expected DescriptorSet 0
               OpDecorate %a1_expected Binding 3
               OpDecorate %b0 Offset 0
               OpDecorate %b0 DescriptorSet 0
               OpDecorate %b0 Binding 2
               OpDecorate %b0_expected Location 2
               OpDecorate %b0_expected DescriptorSet 0
               OpDecorate %b0_expected Binding 4
       %void = OpTypeVoid
          %3 = OpTypeFunction %void
       %uint = OpTypeInt 32 0
%_ptr_Function_uint = OpTypePointer Function %uint
%_ptr_AtomicCounter_uint = OpTypePointer AtomicCounter %uint
         %a0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
     %uint_1 = OpConstant %uint 1
     %uint_0 = OpConstant %uint 0
%_ptr_UniformConstant_uint = OpTypePointer UniformConstant %uint
%a0_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
       %bool = OpTypeBool
      %float = OpTypeFloat 32
    %v4float = OpTypeVector %float 4
%_ptr_Output_v4float = OpTypePointer Output %v4float
      %color = OpVariable %_ptr_Output_v4float Output
    %float_1 = OpConstant %float 1
    %float_0 = OpConstant %float 0
  %float_255 = OpConstant %float 255
         %a1 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
%a1_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
%float_0_100000001 = OpConstant %float 0.100000001
         %b0 = OpVariable %_ptr_AtomicCounter_uint AtomicCounter
        %int = OpTypeInt 32 1
      %int_1 = OpConstant %int 1
%b0_expected = OpVariable %_ptr_UniformConstant_uint UniformConstant
%float_0_200000003 = OpConstant %float 0.200000003
         %67 = OpConstantComposite %v4float %float_0 %float_1 %float_0 %float_1
       %main = OpFunction %void None %3
          %5 = OpLabel
     %a0_out = OpVariable %_ptr_Function_uint Function
     %a1_out = OpVariable %_ptr_Function_uint Function
     %b0_out = OpVariable %_ptr_Function_uint Function
         %13 = OpAtomicLoad %uint %a0 %uint_1 %uint_0
               OpStore %a0_out %13
         %14 = OpLoad %uint %a0_out
         %17 = OpLoad %uint %a0_expected
         %19 = OpINotEqual %bool %14 %17
               OpSelectionMerge %21 None
               OpBranchConditional %19 %20 %21
         %20 = OpLabel
         %28 = OpLoad %uint %a0_out
         %29 = OpConvertUToF %float %28
         %31 = OpFDiv %float %29 %float_255
         %32 = OpCompositeConstruct %v4float %float_1 %float_0 %31 %float_1
               OpStore %color %32
               OpReturn
         %21 = OpLabel
         %36 = OpAtomicIIncrement %uint %a1 %uint_1 %uint_0
               OpStore %a1_out %36
         %37 = OpLoad %uint %a1_out
         %39 = OpLoad %uint %a1_expected
         %40 = OpINotEqual %bool %37 %39
               OpSelectionMerge %42 None
               OpBranchConditional %40 %41 %42
         %41 = OpLabel
         %44 = OpLoad %uint %a1_out
         %45 = OpConvertUToF %float %44
         %46 = OpFDiv %float %45 %float_255
         %47 = OpCompositeConstruct %v4float %float_1 %float_0_100000001 %46 %float_1
               OpStore %color %47
               OpReturn
         %42 = OpLabel
         %51 = OpAtomicIDecrement %uint %b0 %uint_1 %uint_0
         %54 = OpISub %uint %51 %int_1
               OpStore %b0_out %54
         %55 = OpLoad %uint %b0_out
         %57 = OpLoad %uint %b0_expected
         %58 = OpINotEqual %bool %55 %57
               OpSelectionMerge %60 None
               OpBranchConditional %58 %59 %60
         %59 = OpLabel
         %62 = OpLoad %uint %b0_out
         %63 = OpConvertUToF %float %62
         %64 = OpFDiv %float %63 %float_255
         %65 = OpCompositeConstruct %v4float %float_1 %float_0_200000003 %64 %float_1
               OpStore %color %65
               OpReturn
         %60 = OpLabel
               OpStore %color %67
               OpReturn
               OpFunctionEnd

[fragment shader]
#version 450

layout (binding = 0, offset = 4) uniform atomic_uint a0;
layout (binding = 0, offset = 12) uniform atomic_uint a1;
layout (binding = 2, offset = 0) uniform atomic_uint b0;

layout (location = 0) uniform uint a0_expected;
layout (location = 1) uniform uint a1_expected;
layout (location = 2) uniform uint b0_expected;

layout (location = 0) out vec4 color;

void main()
{
	uint a0_out = atomicCounter(a0);
	if (a0_out != a0_expected) {
		color = vec4(1.0, 0.0, float(a0_out) / 255.0, 1.0);
		return;
	}

	uint a1_out = atomicCounterIncrement(a1);
	if (a1_out != a1_expected) {
		color = vec4(1.0, 0.1, float(a1_out) / 255.0, 1.0);
		return;
	}

	uint b0_out = atomicCounterDecrement(b0);
	if (b0_out != b0_expected) {
		color = vec4(1.0, 0.2, float(b0_out) / 255.0, 1.0);
		return;
	}

	color = vec4(0.0, 1.0, 0.0, 1.0);
}

[test]

clear color 0.0 0.0 0.0 0.0
clear

# Initialize atomic counters

atomic counter buffer 0 4
atomic counter buffer 2 1

atomic counter 0 0 0
atomic counter 0 1 5   # a0
atomic counter 0 2 0
atomic counter 0 3 10  # a1
atomic counter 2 0 15  # b0

# Expected return values for the atomic counter operations

uniform uint 0 5
uniform uint 1 10
uniform uint 2 14

verify program_query GL_ACTIVE_UNIFORMS 6
# Check original values for the atomic counters

probe atomic counter buffer 0 0 == 0
probe atomic counter buffer 0 4 == 5   # a0
probe atomic counter buffer 0 8 == 0
probe atomic counter buffer 0 12 == 10 # a1
probe atomic counter buffer 2 0 == 15  # b0

draw rect ortho 0 0 1 1

# Check final values for the atomic counters

probe atomic counter buffer 0 0 == 0
probe atomic counter buffer 0 4 == 5   # a0
probe atomic counter buffer 0 8 == 0
probe atomic counter buffer 0 12 == 11 # a1
probe atomic counter buffer 2 0 == 14  # b0

probe rgba 0 0 0.0 1.0 0.0 1.0
