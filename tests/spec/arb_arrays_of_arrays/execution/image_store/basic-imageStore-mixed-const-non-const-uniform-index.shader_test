# Verify simple reading of a uniform and output to an image

[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_shader_image_load_store
GL_ARB_arrays_of_arrays

[vertex shader]
#version 130
in vec4 piglit_vertex;

void main()
{
	gl_Position = piglit_vertex;
}

[fragment shader]
#version 330
#extension GL_ARB_shader_image_load_store: enable
#extension GL_ARB_arrays_of_arrays: require

uniform vec4 color;
uniform int n;
writeonly uniform image2D tex[2][2];
out vec4 outcolor;

void main()
{
	imageStore(tex[1][n], ivec2(gl_FragCoord.xy), color);
	outcolor = vec4(0.0, 0.0, 0.0, 1.0);
}

[test]
# Texture 0 is the imageStore output.
uniform int tex[1][0] 0
texture rgbw 0 (16, 16) GL_RGBA8
image texture 0 GL_RGBA8

# Texture 1 is the imageStore output.
uniform int tex[1][1] 1
texture rgbw 1 (16, 16) GL_RGBA8
image texture 1 GL_RGBA8

# Texture 3 is the rendering output. We don't care about this.
texture rgbw 2 (16, 16)

# Store red using imageStore
uniform int n 0
uniform vec4 color 1.0 0.0 0.0 1.0
fb tex 2d 2
draw rect -1 -1 2 2

# Test the result of imageStore 0
memory barrier GL_FRAMEBUFFER_BARRIER_BIT
fb tex 2d 0
probe all rgba 1.0 0.0 0.0 1.0

# Store green using imageStore
uniform int n 1
uniform vec4 color 0.0 1.0 0.0 1.0
fb tex 2d 2
draw rect -1 -1 2 2

# Test the result of imageStore 1
memory barrier GL_FRAMEBUFFER_BARRIER_BIT
fb tex 2d 1
probe all rgba 0.0 1.0 0.0 1.0
